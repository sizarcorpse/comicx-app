// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  artistId          String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  username          String         @unique
  profilePhoto      String?
  profileCoverPhoto String?
  isFavorite        Boolean?
  albums            Album[]
  tags              TagsOnArtist[]

  @@map("artists")
}

enum Language {
  English
  Japanese
  Chinese
}

enum Rating {
  Appalling
  Horrible
  Bad
  Average
  Fine
  Good
  Awesome
  Fastastic
  Masterpiece
}

model Album {
  albumId     String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updated     DateTime      @updatedAt
  Artist      Artist?       @relation(fields: [artistId], references: [artistId])
  artistId    String?
  title       String        @default("Untitled Album")
  issue       Int?          @default(1)
  language    Language      @default(English)
  pages       Int?
  isCencored  Boolean       @default(false)
  isFavorited Boolean
  rating      Rating
  photos      Photo[]
  tags        TagsOnAlbum[]

  @@index([title, issue(sort: Asc)])
  @@map("albums")
}

model Photo {
  photoId String  @id @default(uuid())
  Album   Album?  @relation(fields: [albumId], references: [albumId])
  albumId String?

  @@map("photos")
}

model Tag {
  tagId         String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String         @unique @db.VarChar(33)
  description   String?
  photoUrl      String?
  coverPhotoUrl String?
  isFavorited   Boolean
  albums        TagsOnAlbum[]
  artists       TagsOnArtist[]

  @@map("tags")
}

model TagsOnAlbum {
  album     Album    @relation(fields: [albumId], references: [albumId])
  albumId   String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([albumId, tagId])
}

model TagsOnArtist {
  artist    Artist   @relation(fields: [artistId], references: [artistId])
  artistId  String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([artistId, tagId])
}
