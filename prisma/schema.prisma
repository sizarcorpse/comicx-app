// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  artistId       String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  username       String         @unique
  alias          String?
  Avatar         Media?         @relation("artistAvatar", fields: [avatarId], references: [mediaId])
  avatarId       String?        @unique
  Cover          Media?         @relation("artistCover", fields: [coverId], references: [mediaId])
  coverId        String?        @unique
  biography      String?        @default("The universe is a never-ending exploration of the unknown.")
  isFavorite     Boolean?       @default(false)
  isActive       Boolean?       @default(true)
  Social         Social[]
  albums         Album[]
  tags           TagsOnArtist[]
  collaborations Artist[]       @relation("artistCollabor")
  Collaborator   Artist?        @relation("artistCollabor", fields: [collaboratorId], references: [artistId])
  collaboratorId String?

  @@map("artists")
}

model Social {
  socialId  String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  link      String
  Artist    Artist?  @relation(fields: [artistId], references: [artistId], onDelete: Cascade)
  artistId  String?

  @@unique([socialId, artistId])
  @@index([name, link])
  @@map("socials")
}

enum Language {
  English
  Japanese
  Chinese
}

enum Rating {
  Appalling
  Horrible
  Bad
  Average
  Fine
  Good
  Awesome
  Fastastic
  Masterpiece
}

model Album {
  albumId     String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updated     DateTime      @updatedAt
  Artist      Artist?       @relation(fields: [artistId], references: [artistId])
  artistId    String?
  title       String        @default("Untitled Album")
  issue       Int?          @default(1)
  language    Language      @default(English)
  pages       Int?
  isCencored  Boolean       @default(false)
  isFavorited Boolean
  rating      Rating
  photos      Media[]
  tags        TagsOnAlbum[]

  @@index([title, issue(sort: Asc)])
  @@map("albums")
}

model Thumbnail {
  thumbnailId String @id @default(uuid())
  format      String
  width       Int
  height      Int
  size        Int
  path        String
  // Media       Media? @relation("mediaThumbnail")

  Media   Media?  @relation("mediaThumbnail", fields: [mediaId], references: [mediaId], onDelete: Cascade)
  mediaId String? @unique

  @@map("thumbnails")
}

model Media {
  mediaId      String     @id @default(uuid())
  Album        Album?     @relation(fields: [albumId], references: [albumId])
  albumId      String?
  fieldname    String
  mimetype     String
  destination  String
  filename     String
  path         String
  size         Int
  format       String
  width        Int?
  height       Int?
  Thumbnail    Thumbnail? @relation("mediaThumbnail")
  Tag          Tag?       @relation("tagAvatar", fields: [tagId], references: [tagId], onDelete: Cascade)
  tagId        String?    @unique
  Cover        Tag?       @relation("tagCover", fields: [coverId], references: [tagId], onDelete: Cascade)
  coverId      String?    @unique
  ArtistAvatar Artist?    @relation("artistAvatar")
  ArtistCover  Artist?    @relation("artistCover")

  @@map("media")
}

model Tag {
  tagId       String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  title       String         @unique @db.VarChar(33)
  description String?
  Avatar      Media?         @relation("tagAvatar")
  Cover       Media?         @relation("tagCover")
  isFavorited Boolean?       @default(false)
  albums      TagsOnAlbum[]
  artists     TagsOnArtist[]

  @@map("tags")
}

model TagsOnAlbum {
  album     Album    @relation(fields: [albumId], references: [albumId])
  albumId   String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([albumId, tagId])
}

model TagsOnArtist {
  artist    Artist   @relation(fields: [artistId], references: [artistId])
  artistId  String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([artistId, tagId])
}
