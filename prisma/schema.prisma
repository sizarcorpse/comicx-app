// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  artistId          String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  username          String         @unique
  profilePhoto      String?
  profileCoverPhoto String?
  isFavorite        Boolean?
  albums            Album[]
  tags              TagsOnArtist[]

  @@map("artists")
}

enum Language {
  English
  Japanese
  Chinese
}

enum Rating {
  Appalling
  Horrible
  Bad
  Average
  Fine
  Good
  Awesome
  Fastastic
  Masterpiece
}

model Album {
  albumId     String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updated     DateTime      @updatedAt
  Artist      Artist?       @relation(fields: [artistId], references: [artistId])
  artistId    String?
  title       String        @default("Untitled Album")
  issue       Int?          @default(1)
  language    Language      @default(English)
  pages       Int?
  isCencored  Boolean       @default(false)
  isFavorited Boolean
  rating      Rating
  photos      Media[]
  tags        TagsOnAlbum[]

  @@index([title, issue(sort: Asc)])
  @@map("albums")
}

model Thumbnail {
  thumbnailId String @id @default(uuid())
  format      String
  width       Int
  height      Int
  size        Int
  destination String
  Media       Media? @relation("mediaThumbnail")
}

model Media {
  mediaId     String     @id @default(uuid())
  Album       Album?     @relation(fields: [albumId], references: [albumId])
  albumId     String?
  fieldname   String
  mimetype    String
  destination String
  filename    String
  path        String
  size        Int
  format      String
  width       Int?
  height      Int?
  Thumbnail   Thumbnail? @relation("mediaThumbnail", fields: [thumbnailId], references: [thumbnailId])
  thumbnailId String?    @unique
  TagAvatar   Tag?       @relation("tagAvatar")
  TagCover    Tag?       @relation("tagCover")

  @@map("media")
}

model Tag {
  tagId       String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  title       String         @unique @db.VarChar(33)
  description String?
  Avatar      Media?         @relation("tagAvatar", fields: [avatarId], references: [mediaId])
  avatarId    String?        @unique
  Cover       Media?         @relation("tagCover", fields: [coverId], references: [mediaId])
  coverId     String?        @unique
  isFavorited Boolean?       @default(false)
  albums      TagsOnAlbum[]
  artists     TagsOnArtist[]

  @@map("tags")
}

model TagsOnAlbum {
  album     Album    @relation(fields: [albumId], references: [albumId])
  albumId   String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([albumId, tagId])
}

model TagsOnArtist {
  artist    Artist   @relation(fields: [artistId], references: [artistId])
  artistId  String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([artistId, tagId])
}
