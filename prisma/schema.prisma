// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  artistId          String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  username          String         @unique
  profilePhoto      String?
  profileCoverPhoto String?
  isFavorite        Boolean?
  albums            Album[]
  tags              TagsOnArtist[]
}

model Album {
  albumId   String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updated   DateTime      @updatedAt
  Artist    Artist?       @relation(fields: [artistId], references: [artistId])
  artistId  String?
  photos    Photo[]
  tags      TagsOnAlbum[]
}

model Photo {
  photoId String  @id @default(uuid())
  Album   Album?  @relation(fields: [albumId], references: [albumId])
  albumId String?
}

model Tag {
  tagId         String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  tagPhoto      String?
  tagCoverPhoto String?
  albums        TagsOnAlbum[]
  atrsit        TagsOnArtist[]
}

model TagsOnAlbum {
  album     Album    @relation(fields: [albumId], references: [albumId])
  albumId   String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([albumId, tagId])
}

model TagsOnArtist {
  artist    Artist   @relation(fields: [artistId], references: [artistId])
  artistId  String
  tag       Tag      @relation(fields: [tagId], references: [tagId])
  tagId     String
  createdAt DateTime @default(now())

  @@id([artistId, tagId])
}
